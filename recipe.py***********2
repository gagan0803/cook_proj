from database.mongo_setup import get_mongo_collection
from database.mysql_setup import get_connection
from bson.objectid import ObjectId

class Recipe:
    def __init__(self, _id, name, description, ingredients, instructions, prep_time, cook_time, servings, difficulty, image_url, tags, nutrition, dietary_info):
        self._id = _id
        self.name = name
        self.description = description
        self.ingredients = ingredients # List of dicts: [{'name': 'egg', 'amount': 2, 'unit': 'large'}]
        self.instructions = instructions
        self.prep_time = prep_time
        self.cook_time = cook_time
        self.servings = servings
        self.difficulty = difficulty
        self.image_url = image_url
        self.tags = tags
        self.nutrition = nutrition
        self.dietary_info = dietary_info

    @staticmethod
    def get_all():
        collection = get_mongo_collection('recipes')
        recipes_data = list(collection.find({}))
        for recipe in recipes_data:
            recipe['_id'] = str(recipe['_id'])
        return recipes_data

    @staticmethod
    def get_by_id(recipe_id):
        collection = get_mongo_collection('recipes')
        recipe = collection.find_one({"_id": ObjectId(recipe_id)})
        if recipe:
            recipe['_id'] = str(recipe['_id'])
        return recipe

    @staticmethod
    def search_by_name(search_term):
        collection = get_mongo_collection('recipes')
        recipes_data = list(collection.find({"name": {"$regex": search_term, "$options": "i"}}))
        for recipe in recipes_data:
            recipe['_id'] = str(recipe['_id'])
        return recipes_data

    @staticmethod
    def search_by_ingredients(ingredient_names):
        collection = get_mongo_collection('recipes')
        ingredient_names_lower = [name.lower().strip() for name in ingredient_names]

        recipes = list(collection.find({
            "ingredients.name": {"$in": [f"(?i){name}" for name in ingredient_names_lower]}
        }))

        matched_recipes = []
        for recipe in recipes:
            recipe_ingredient_names = [ing['name'].lower().strip() for ing in recipe.get('ingredients', [])]
            total_recipe_ingredients = len(recipe_ingredient_names)
            
            if total_recipe_ingredients == 0:
                recipe['match_percentage'] = 0
                continue

            matched_count = 0
            for ing_name in recipe_ingredient_names:
                if ing_name in ingredient_names_lower:
                    matched_count += 1
            
            match_percentage = (matched_count / total_recipe_ingredients) * 100 if total_recipe_ingredients > 0 else 0
            recipe['match_percentage'] = round(match_percentage, 2)
            
            recipe['_id'] = str(recipe['_id'])
            
            if recipe['match_percentage'] > 0:
                matched_recipes.append(recipe)
        
        matched_recipes.sort(key=lambda x: x.get('match_percentage', 0), reverse=True)
        return matched_recipes

    @staticmethod
    def filter_by_dietary(recipes, dietary_filters):
        if not dietary_filters:
            return recipes

        filtered = []
        for recipe in recipes:
            is_match = True
            for diet_type, is_active in dietary_filters.items():
                if is_active and not recipe.get('dietary_info', {}).get(diet_type):
                    is_match = False
                    break
            if is_match:
                filtered.append(recipe)
        return filtered

    @staticmethod
    def check_ingredients_for_servings(recipe, user_inventory, recipe_ingredients, servings_to_make):
        """
        Checks if the user has enough ingredients for a given number of servings.
        recipe: The full recipe object (dictionary) to access its base servings.
        user_inventory: A dictionary where keys are normalized ingredient names (lowercase, stripped)
                        and values are dictionaries like {'quantity': X, 'unit': Y}
                        This should be the aggregated view from Inventory.get_aggregated_by_user_id.
        recipe_ingredients: List of dictionaries from recipe: [{'name': 'egg', 'amount': 2, 'unit': 'large'}]
        servings_to_make: Integer, number of desired servings.
        """
        has_all_ingredients = True
        missing_ingredients = []
        low_stock_ingredients = []

        temp_inventory = {k: v.copy() for k, v in user_inventory.items()}

        recipe_base_servings = recipe.get('servings', 1) # Get the base servings from the passed recipe object

        for recipe_ing in recipe_ingredients:
            recipe_ing_name = recipe_ing['name'].lower().strip()
            # Calculate required amount for the desired servings using recipe_base_servings
            required_amount_for_servings = recipe_ing['amount'] * (servings_to_make / recipe_base_servings)

            if recipe_ing_name in temp_inventory:
                available_quantity = temp_inventory[recipe_ing_name]['quantity']
                
                # Basic unit compatibility check - a more robust system would need unit conversion
                if temp_inventory[recipe_ing_name]['unit'] != recipe_ing['unit']:
                    # print(f"Warning: Unit mismatch for {recipe_ing_name}. Recipe needs {recipe_ing['unit']}, user has {temp_inventory[recipe_ing_name]['unit']}. Assuming compatibility for check.")
                    pass

                if available_quantity < required_amount_for_servings:
                    has_all_ingredients = False
                    missing_ingredients.append({
                        'name': recipe_ing['name'],
                        'required': required_amount_for_servings,
                        'unit': recipe_ing['unit'],
                        'current_available': available_quantity
                    })
                
                temp_inventory[recipe_ing_name]['quantity'] -= required_amount_for_servings
                if temp_inventory[recipe_ing_name]['quantity'] <= 0.5 and has_all_ingredients:
                    low_stock_ingredients.append({
                        'name': recipe_ing['name'],
                        'remaining': max(0, temp_inventory[recipe_ing_name]['quantity']),
                        'unit': recipe_ing['unit']
                    })

            else:
                has_all_ingredients = False
                missing_ingredients.append({
                    'name': recipe_ing['name'],
                    'required': required_amount_for_servings,
                    'unit': recipe_ing['unit'],
                    'current_available': 0
                })
        
        return has_all_ingredients, missing_ingredients, low_stock_ingredients
